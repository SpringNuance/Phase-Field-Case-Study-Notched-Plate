from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-mm'].parts['plate'].deleteMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Model-3D-mm'].ConstrainedSketch(gridSpacing=0.05, name=
    '__profile__', sheetSize=2.23, transform=
    mdb.models['Model-3D-mm'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-3D-mm'].parts['plate'].faces[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-3D-mm'].parts['plate'].edges[8], 
    sketchOrientation=RIGHT, origin=(8.3e-05, 0.250062, 0.02)))
mdb.models['Model-3D-mm'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-3D-mm'].sketches['__profile__'])
mdb.models['Model-3D-mm'].sketches['__profile__'].Line(point1=(-8.3e-05, 
    0.249938), point2=(-8.3e-05, -0.750062000003219))
mdb.models['Model-3D-mm'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-3D-mm'].sketches['__profile__'].geometry[12])
mdb.models['Model-3D-mm'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D-mm'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-3D-mm'].sketches['__profile__'].geometry[12])
mdb.models['Model-3D-mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Model-3D-mm'].sketches['__profile__'].geometry[7])
mdb.models['Model-3D-mm'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[5], midpoint=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[8])
mdb.models['Model-3D-mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-3D-mm'].sketches['__profile__'].geometry[9])
mdb.models['Model-3D-mm'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[6], midpoint=
    mdb.models['Model-3D-mm'].sketches['__profile__'].vertices[9])
mdb.models['Model-3D-mm'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['Model-3D-mm'].parts['plate'].faces.getSequenceFromMask((
    '[#804 ]', ), ), sketch=mdb.models['Model-3D-mm'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['Model-3D-mm'].parts['plate'].edges[8])
del mdb.models['Model-3D-mm'].sketches['__profile__']
mdb.models['Model-3D-mm'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#3 ]', ), ), edges=(mdb.models['Model-3D-mm'].parts['plate'].edges[0], 
    mdb.models['Model-3D-mm'].parts['plate'].edges[4]), line=
    mdb.models['Model-3D-mm'].parts['plate'].edges[9], sense=REVERSE)
mdb.models['Model-3D-mm'].parts['plate'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#f ]', ), ), technique=SWEEP)
mdb.models['Model-3D-mm'].parts['plate'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end2Edges=
    mdb.models['Model-3D-mm'].parts['plate'].edges.getSequenceFromMask((
    '[#5 ]', ), ), maxSize=0.04, minSize=0.005)
mdb.models['Model-3D-mm'].parts['plate'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-3D-mm'].parts['plate'].edges.getSequenceFromMask((
    '[#50 ]', ), ), maxSize=0.04, minSize=0.005)
mdb.models['Model-3D-mm'].parts['plate'].generateMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-3D-mm'].parts['plate'].deleteMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-3D-mm'].parts['plate'].setMeshControls(allowMapped=False, 
    regions=mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D-mm'].parts['plate'].generateMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-3D-mm'].parts['plate'].generateMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-3D-mm'].parts['plate'].generateMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['Model-3D-mm'].parts['plate'].generateMesh(regions=
    mdb.models['Model-3D-mm'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
# Save by nguyenb5 on 2024_08_31-12.56.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-mm'].rootAssembly.regenerate()
mdb.models['Model-3D-mm'].steps['Step-1'].setValues(nlgeom=ON)
mdb.models['Model-3D-mm'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('NT', 'RF', 'SDV', 'U'))
mdb.models['Model-3D-mm'].boundaryConditions['BC-1'].setValuesInStep(stepName=
    'Step-1', u3=0.0)
# Save by nguyenb5 on 2024_08_31-13.00.07; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-3D-m', toName='Model-3D-meter-ref')
mdb.models.changeKey(fromName='Model-2D', toName='Model-2D-millimeter-ref')
mdb.models.changeKey(fromName='Model-3D-mm', toName='Model-3D-millimeter')
del mdb.jobs['phase_field_plate_3D']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-3D-millimeter', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='phase_field_3D_millimeter', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
# Save by nguyenb5 on 2024_08_31-13.03.54; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(cetol=None, 
    creepIntegration=None, deltmx=10.0, maxInc=1000.0, 
    timeIncrementationMethod=AUTOMATIC)
# Save by nguyenb5 on 2024_08_31-13.15.46; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].materials['user_material'].depvar.setValues(
    n=15)
# Save by nguyenb5 on 2024_08_31-13.16.05; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].boundaryConditions['BC-1'].setValues(u3=SET)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None)
# Save by nguyenb5 on 2024_08_31-13.17.01; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].parts['plate'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-3D-millimeter'].parts['plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ), ))
# Save by nguyenb5 on 2024_08_31-13.17.27; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].rootAssembly.regenerate()
del mdb.models['Model-3D-millimeter'].boundaryConditions['BC-1']
mdb.models['Model-3D-millimeter'].rootAssembly.Set(faces=
    mdb.models['Model-3D-millimeter'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    ('[#10004 ]', ), ), name='Set-6')
mdb.models['Model-3D-millimeter'].DisplacementBC(amplitude=UNSET, 
    createStepName='Initial', distributionType=UNIFORM, fieldName='', 
    localCsys=None, name='BC-1', region=
    mdb.models['Model-3D-millimeter'].rootAssembly.sets['Set-6'], u1=SET, u2=
    SET, u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by nguyenb5 on 2024_08_31-13.39.01; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['Model-3D-millimeter'].rootAssembly.sets['bottom_side'])
# Save by nguyenb5 on 2024_08_31-13.39.53; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-2D-millimeter-ref-Copy', objectToCopy=
    mdb.models['Model-2D-millimeter-ref'])
del mdb.models['Model-2D-millimeter-ref-Copy'].steps['Step-1']
mdb.models['Model-2D-millimeter-ref-Copy'].StaticStep(name='Step-1', nlgeom=ON, 
    noStop=OFF, previous='Initial', timeIncrementationMethod=FIXED)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(cetol=None, 
    creepIntegration=None, deltmx=None, initialInc=1.0, 
    timeIncrementationMethod=FIXED)
# Save by nguyenb5 on 2024_08_31-17.33.43; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None, initialInc=1000.0)
mdb.models['Model-2D-millimeter-ref'].steps['Step-1'].setValues(
    creepIntegration=None)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None, initialInc=10000.0)
# Save by nguyenb5 on 2024_08_31-17.56.45; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None, initialInc=100000.0)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None)
mdb.models['Model-3D-millimeter'].steps['Step-1'].setValues(creepIntegration=
    None, initialInc=10000.0)
# Save by nguyenb5 on 2024_08_31-18.57.26; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_09_01-09.08.14; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-2D-millimeter-ref-Copy']
mdb.models['Model-3D-millimeter'].fieldOutputRequests['F-Output-1'].setValues(
    frequency=1, variables=('RF', 'SDV', 'U'))
# Save by nguyenb5 on 2024_09_01-10.02.53; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_09_01-10.09.23; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
